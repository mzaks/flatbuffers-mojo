# automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

@value
struct OptionalByte(EqualityComparable):
    var value: Int8

    alias None_ = OptionalByte(0)
    alias One = OptionalByte(1)
    alias Two = OptionalByte(2)

    fn __eq__(self, other: OptionalByte) -> Bool:
        return self.value == other.value

    fn __ne__(self, other: OptionalByte) -> Bool:
        return self.value != other.value


@value
struct ScalarStuff:
    var _buf: UnsafePointer[UInt8]
    var _pos: Int

    fn just_i8(self) -> Int8:
        return flatbuffers.field[DType.int8](self._buf, int(self._pos), 4, 0)

    fn maybe_i8(self) -> Optional[Int8]:
        return flatbuffers.field[DType.int8](self._buf, int(self._pos), 6)

    fn default_i8(self) -> Int8:
        return flatbuffers.field[DType.int8](self._buf, int(self._pos), 8, 42)

    fn just_u8(self) -> UInt8:
        return flatbuffers.field[DType.uint8](self._buf, int(self._pos), 10, 0)

    fn maybe_u8(self) -> Optional[UInt8]:
        return flatbuffers.field[DType.uint8](self._buf, int(self._pos), 12)

    fn default_u8(self) -> UInt8:
        return flatbuffers.field[DType.uint8](self._buf, int(self._pos), 14, 42)

    fn just_i16(self) -> Int16:
        return flatbuffers.field[DType.int16](self._buf, int(self._pos), 16, 0)

    fn maybe_i16(self) -> Optional[Int16]:
        return flatbuffers.field[DType.int16](self._buf, int(self._pos), 18)

    fn default_i16(self) -> Int16:
        return flatbuffers.field[DType.int16](self._buf, int(self._pos), 20, 42)

    fn just_u16(self) -> UInt16:
        return flatbuffers.field[DType.uint16](self._buf, int(self._pos), 22, 0)

    fn maybe_u16(self) -> Optional[UInt16]:
        return flatbuffers.field[DType.uint16](self._buf, int(self._pos), 24)

    fn default_u16(self) -> UInt16:
        return flatbuffers.field[DType.uint16](self._buf, int(self._pos), 26, 42)

    fn just_i32(self) -> Int32:
        return flatbuffers.field[DType.int32](self._buf, int(self._pos), 28, 0)

    fn maybe_i32(self) -> Optional[Int32]:
        return flatbuffers.field[DType.int32](self._buf, int(self._pos), 30)

    fn default_i32(self) -> Int32:
        return flatbuffers.field[DType.int32](self._buf, int(self._pos), 32, 42)

    fn just_u32(self) -> UInt32:
        return flatbuffers.field[DType.uint32](self._buf, int(self._pos), 34, 0)

    fn maybe_u32(self) -> Optional[UInt32]:
        return flatbuffers.field[DType.uint32](self._buf, int(self._pos), 36)

    fn default_u32(self) -> UInt32:
        return flatbuffers.field[DType.uint32](self._buf, int(self._pos), 38, 42)

    fn just_i64(self) -> Int64:
        return flatbuffers.field[DType.int64](self._buf, int(self._pos), 40, 0)

    fn maybe_i64(self) -> Optional[Int64]:
        return flatbuffers.field[DType.int64](self._buf, int(self._pos), 42)

    fn default_i64(self) -> Int64:
        return flatbuffers.field[DType.int64](self._buf, int(self._pos), 44, 42)

    fn just_u64(self) -> UInt64:
        return flatbuffers.field[DType.uint64](self._buf, int(self._pos), 46, 0)

    fn maybe_u64(self) -> Optional[UInt64]:
        return flatbuffers.field[DType.uint64](self._buf, int(self._pos), 48)

    fn default_u64(self) -> UInt64:
        return flatbuffers.field[DType.uint64](self._buf, int(self._pos), 50, 42)

    fn just_f32(self) -> Float32:
        return flatbuffers.field[DType.float32](self._buf, int(self._pos), 52, 0.0)

    fn maybe_f32(self) -> Optional[Float32]:
        return flatbuffers.field[DType.float32](self._buf, int(self._pos), 54)

    fn default_f32(self) -> Float32:
        return flatbuffers.field[DType.float32](self._buf, int(self._pos), 56, 42.0)

    fn just_f64(self) -> Float64:
        return flatbuffers.field[DType.float64](self._buf, int(self._pos), 58, 0.0)

    fn maybe_f64(self) -> Optional[Float64]:
        return flatbuffers.field[DType.float64](self._buf, int(self._pos), 60)

    fn default_f64(self) -> Float64:
        return flatbuffers.field[DType.float64](self._buf, int(self._pos), 62, 42.0)

    fn just_bool(self) -> Scalar[DType.bool]:
        return flatbuffers.field[DType.bool](self._buf, int(self._pos), 64, 0)

    fn maybe_bool(self) -> Optional[Scalar[DType.bool]]:
        return flatbuffers.field[DType.bool](self._buf, int(self._pos), 66)

    fn default_bool(self) -> Scalar[DType.bool]:
        return flatbuffers.field[DType.bool](self._buf, int(self._pos), 68, 1)

    fn just_enum(self) -> OptionalByte:
        return flatbuffers.field[DType.int8](self._buf, int(self._pos), 70, 0)

    fn maybe_enum(self) -> Optional[OptionalByte]:
        var value = flatbuffers.field[DType.int8](self._buf, int(self._pos), 72)
        if not value: return None
        return Optional[OptionalByte](value.value())

    fn default_enum(self) -> OptionalByte:
        return flatbuffers.field[DType.int8](self._buf, int(self._pos), 74, 1)

    @staticmethod
    fn as_root(buf: UnsafePointer[UInt8]) -> ScalarStuff:
        return ScalarStuff(buf, flatbuffers.read_offset_as_int(buf, 0))

    @staticmethod
    fn build(
        inout builder: flatbuffers.Builder,
        *,
        just_i8: Int8 = 0,
        maybe_i8: Optional[Int8] = None,
        default_i8: Int8 = 42,
        just_u8: UInt8 = 0,
        maybe_u8: Optional[UInt8] = None,
        default_u8: UInt8 = 42,
        just_i16: Int16 = 0,
        maybe_i16: Optional[Int16] = None,
        default_i16: Int16 = 42,
        just_u16: UInt16 = 0,
        maybe_u16: Optional[UInt16] = None,
        default_u16: UInt16 = 42,
        just_i32: Int32 = 0,
        maybe_i32: Optional[Int32] = None,
        default_i32: Int32 = 42,
        just_u32: UInt32 = 0,
        maybe_u32: Optional[UInt32] = None,
        default_u32: UInt32 = 42,
        just_i64: Int64 = 0,
        maybe_i64: Optional[Int64] = None,
        default_i64: Int64 = 42,
        just_u64: UInt64 = 0,
        maybe_u64: Optional[UInt64] = None,
        default_u64: UInt64 = 42,
        just_f32: Float32 = 0.0,
        maybe_f32: Optional[Float32] = None,
        default_f32: Float32 = 42.0,
        just_f64: Float64 = 0.0,
        maybe_f64: Optional[Float64] = None,
        default_f64: Float64 = 42.0,
        just_bool: Scalar[DType.bool] = 0,
        maybe_bool: Optional[Scalar[DType.bool]] = None,
        default_bool: Scalar[DType.bool] = 1,
        just_enum: OptionalByte = OptionalByte(0),
        maybe_enum: Optional[OptionalByte] = None,
        default_enum: OptionalByte = OptionalByte(1),
    ) -> flatbuffers.Offset:
        builder.start_object(36)
        if just_i8 != 0:
            builder.prepend(just_i8)
            builder.slot(0)
        if maybe_i8 is not None:
            builder.prepend(maybe_i8.value())
            builder.slot(1)
        if default_i8 != 42:
            builder.prepend(default_i8)
            builder.slot(2)
        if just_u8 != 0:
            builder.prepend(just_u8)
            builder.slot(3)
        if maybe_u8 is not None:
            builder.prepend(maybe_u8.value())
            builder.slot(4)
        if default_u8 != 42:
            builder.prepend(default_u8)
            builder.slot(5)
        if just_i16 != 0:
            builder.prepend(just_i16)
            builder.slot(6)
        if maybe_i16 is not None:
            builder.prepend(maybe_i16.value())
            builder.slot(7)
        if default_i16 != 42:
            builder.prepend(default_i16)
            builder.slot(8)
        if just_u16 != 0:
            builder.prepend(just_u16)
            builder.slot(9)
        if maybe_u16 is not None:
            builder.prepend(maybe_u16.value())
            builder.slot(10)
        if default_u16 != 42:
            builder.prepend(default_u16)
            builder.slot(11)
        if just_i32 != 0:
            builder.prepend(just_i32)
            builder.slot(12)
        if maybe_i32 is not None:
            builder.prepend(maybe_i32.value())
            builder.slot(13)
        if default_i32 != 42:
            builder.prepend(default_i32)
            builder.slot(14)
        if just_u32 != 0:
            builder.prepend(just_u32)
            builder.slot(15)
        if maybe_u32 is not None:
            builder.prepend(maybe_u32.value())
            builder.slot(16)
        if default_u32 != 42:
            builder.prepend(default_u32)
            builder.slot(17)
        if just_i64 != 0:
            builder.prepend(just_i64)
            builder.slot(18)
        if maybe_i64 is not None:
            builder.prepend(maybe_i64.value())
            builder.slot(19)
        if default_i64 != 42:
            builder.prepend(default_i64)
            builder.slot(20)
        if just_u64 != 0:
            builder.prepend(just_u64)
            builder.slot(21)
        if maybe_u64 is not None:
            builder.prepend(maybe_u64.value())
            builder.slot(22)
        if default_u64 != 42:
            builder.prepend(default_u64)
            builder.slot(23)
        if just_f32 != 0.0:
            builder.prepend(just_f32)
            builder.slot(24)
        if maybe_f32 is not None:
            builder.prepend(maybe_f32.value())
            builder.slot(25)
        if default_f32 != 42.0:
            builder.prepend(default_f32)
            builder.slot(26)
        if just_f64 != 0.0:
            builder.prepend(just_f64)
            builder.slot(27)
        if maybe_f64 is not None:
            builder.prepend(maybe_f64.value())
            builder.slot(28)
        if default_f64 != 42.0:
            builder.prepend(default_f64)
            builder.slot(29)
        if just_bool != 0:
            builder.prepend(just_bool)
            builder.slot(30)
        if maybe_bool is not None:
            builder.prepend(maybe_bool.value())
            builder.slot(31)
        if default_bool != 1:
            builder.prepend(default_bool)
            builder.slot(32)
        if just_enum != OptionalByte(0):
            builder.prepend(just_enum.value)
            builder.slot(33)
        if maybe_enum is not None:
            builder.prepend(maybe_enum.value().value)
            builder.slot(34)
        if default_enum != OptionalByte(1):
            builder.prepend(default_enum.value)
            builder.slot(35)
        return builder.end_object()

