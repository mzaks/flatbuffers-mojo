# automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

@value
struct Month(EqualityComparable):
    var value: UInt8

    alias Jan = Month(0)
    alias Feb = Month(1)
    alias Mar = Month(2)
    alias Apr = Month(3)
    alias May = Month(4)
    alias Jun = Month(5)
    alias Jul = Month(6)
    alias Aug = Month(7)
    alias Sep = Month(8)
    alias Oct = Month(9)
    alias Nov = Month(10)
    alias Dec = Month(11)

    fn __eq__(self, other: Month) -> Bool:
        return self.value == other.value

    fn __ne__(self, other: Month) -> Bool:
        return self.value != other.value


@value
struct Date:
    var _buf: UnsafePointer[UInt8]
    var _pos: Int

    fn day(self) -> UInt8:
        return flatbuffers.read[DType.uint8](self._buf, int(self._pos) + 0)

    fn month(self) -> Month:
        return flatbuffers.read[DType.uint8](self._buf, int(self._pos) + 1)

    fn year(self) -> UInt16:
        return flatbuffers.read[DType.uint16](self._buf, int(self._pos) + 2)

    @staticmethod
    fn build(
        inout builder: flatbuffers.Builder,
        *,
        day: UInt8,
        month: Month,
        year: UInt16,
    ):
        builder.prep(2, 4)
        builder.prepend[DType.uint16](year)
        builder.prepend[DType.uint8](month.value)
        builder.prepend[DType.uint8](day)

@value
struct DateVO:
    var year: UInt16
    var month: Month
    var day: UInt8

@value
struct Person:
    var _buf: UnsafePointer[UInt8]
    var _pos: Int

    fn name(self) -> StringRef:
        return flatbuffers.field_string(self._buf, int(self._pos), 4)

    fn birthday(self) -> Optional[Date]:
        var o = flatbuffers.field_struct(self._buf, int(self._pos), 8)
        if o:
            return Date(self._buf, o.take())
        return None

    @staticmethod
    fn as_root(buf: UnsafePointer[UInt8]) -> Person:
        return Person(buf, flatbuffers.read_offset_as_int(buf, 0))

    @staticmethod
    fn build(
        inout builder: flatbuffers.Builder,
        *,
        name: Optional[StringRef] = None,
        birthday: Optional[DateVO] = None,
    ) -> flatbuffers.Offset:
        var _name: Optional[flatbuffers.Offset] = None
        if name is not None:
            _name = builder.prepend(name.value())
        builder.start_object(3)
        if _name is not None:
            builder.prepend(_name.value())
            builder.slot(0)
        if birthday is not None:
            Date.build(
                builder,
                day=birthday.value().day,
                month=birthday.value().month,
                year=birthday.value().year,
            )
            builder.slot(2)
        return builder.end_object()

