# automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

@value
struct Month(EqualityComparable):
    var value: UInt8

    alias Jan = Month(0)
    alias Feb = Month(1)
    alias Mar = Month(2)
    alias Apr = Month(3)
    alias May = Month(4)
    alias Jun = Month(5)
    alias Jul = Month(6)
    alias Aug = Month(7)
    alias Sep = Month(8)
    alias Oct = Month(9)
    alias Nov = Month(10)
    alias Dec = Month(11)

    fn __eq__(self, other: Month) -> Bool:
        return self.value == other.value

    fn __ne__(self, other: Month) -> Bool:
        return self.value != other.value


@value
struct Address(EqualityComparable):
    var value: UInt8

    alias NONE = Address(0)
    alias Postal = Address(1)
    alias Email = Address(2)

    fn __eq__(self, other: Address) -> Bool:
        return self.value == other.value

    fn __ne__(self, other: Address) -> Bool:
        return self.value != other.value


@value
struct Date:
    var _buf: UnsafePointer[UInt8]
    var _pos: Int

    fn day(self) -> UInt8:
        return flatbuffers.read[DType.uint8](self._buf, int(self._pos) + 0)

    fn month(self) -> Month:
        return flatbuffers.read[DType.uint8](self._buf, int(self._pos) + 1)

    fn year(self) -> UInt16:
        return flatbuffers.read[DType.uint16](self._buf, int(self._pos) + 2)

    @staticmethod
    fn build(
        mut builder: flatbuffers.Builder,
        *,
        day: UInt8,
        month: Month,
        year: UInt16,
    ):
        builder.prep(2, 4)
        builder.prepend[DType.uint16](year)
        builder.prepend[DType.uint8](month.value)
        builder.prepend[DType.uint8](day)

@value
struct DateVO:
    var year: UInt16
    var month: Month
    var day: UInt8

@value
struct PostalAddress:
    var _buf: UnsafePointer[UInt8]
    var _pos: Int

    fn street(self) -> StringRef:
        return flatbuffers.field_string(self._buf, int(self._pos), 4)

    fn has_street(self) -> Bool:
        return flatbuffers.has_field(self._buf, int(self._pos), 4)

    fn zip(self) -> StringRef:
        return flatbuffers.field_string(self._buf, int(self._pos), 6)

    fn has_zip(self) -> Bool:
        return flatbuffers.has_field(self._buf, int(self._pos), 6)

    fn city(self) -> StringRef:
        return flatbuffers.field_string(self._buf, int(self._pos), 8)

    fn has_city(self) -> Bool:
        return flatbuffers.has_field(self._buf, int(self._pos), 8)

    fn country(self) -> StringRef:
        return flatbuffers.field_string(self._buf, int(self._pos), 10)

    fn has_country(self) -> Bool:
        return flatbuffers.has_field(self._buf, int(self._pos), 10)

    @staticmethod
    fn as_root(buf: UnsafePointer[UInt8]) -> PostalAddress:
        return PostalAddress(buf, flatbuffers.read_offset_as_int(buf, 0))

    @staticmethod
    fn build(
        mut builder: flatbuffers.Builder,
        *,
        street: Optional[StringRef] = None,
        zip: Optional[StringRef] = None,
        city: Optional[StringRef] = None,
        country: Optional[StringRef] = None,
    ) -> flatbuffers.Offset:
        var _street: Optional[flatbuffers.Offset] = None
        if street is not None:
            _street = builder.prepend(street.value())
        var _zip: Optional[flatbuffers.Offset] = None
        if zip is not None:
            _zip = builder.prepend(zip.value())
        var _city: Optional[flatbuffers.Offset] = None
        if city is not None:
            _city = builder.prepend(city.value())
        var _country: Optional[flatbuffers.Offset] = None
        if country is not None:
            _country = builder.prepend(country.value())
        builder.start_object(4)
        if _street is not None:
            builder.prepend(_street.value())
            builder.slot(0)
        if _zip is not None:
            builder.prepend(_zip.value())
            builder.slot(1)
        if _city is not None:
            builder.prepend(_city.value())
            builder.slot(2)
        if _country is not None:
            builder.prepend(_country.value())
            builder.slot(3)
        return builder.end_object()

@value
struct EmailAddress:
    var _buf: UnsafePointer[UInt8]
    var _pos: Int

    fn email(self) -> StringRef:
        return flatbuffers.field_string(self._buf, int(self._pos), 4)

    fn has_email(self) -> Bool:
        return flatbuffers.has_field(self._buf, int(self._pos), 4)

    @staticmethod
    fn as_root(buf: UnsafePointer[UInt8]) -> EmailAddress:
        return EmailAddress(buf, flatbuffers.read_offset_as_int(buf, 0))

    @staticmethod
    fn build(
        mut builder: flatbuffers.Builder,
        *,
        email: Optional[StringRef] = None,
    ) -> flatbuffers.Offset:
        var _email: Optional[flatbuffers.Offset] = None
        if email is not None:
            _email = builder.prepend(email.value())
        builder.start_object(1)
        if _email is not None:
            builder.prepend(_email.value())
            builder.slot(0)
        return builder.end_object()

@value
struct Person:
    var _buf: UnsafePointer[UInt8]
    var _pos: Int

    fn name(self) -> StringRef:
        return flatbuffers.field_string(self._buf, int(self._pos), 4)

    fn has_name(self) -> Bool:
        return flatbuffers.has_field(self._buf, int(self._pos), 4)

    fn birthday(self) -> Optional[Date]:
        var o = flatbuffers.field_struct(self._buf, int(self._pos), 8)
        if o:
            return Date(self._buf, o.take())
        return None

    fn nicknames(self, i: Int) -> StringRef:
        return flatbuffers.string(self._buf, flatbuffers.field_vector(self._buf, int(self._pos), 12) + i * 4)

    fn has_nicknames(self) -> Bool:
        return flatbuffers.has_field(self._buf, int(self._pos), 12)

    fn nicknames_length(self) -> Int:
        return flatbuffers.field_vector_len(self._buf, int(self._pos), 12)

    fn important_dates(self, i: Int) -> Date:
        var start = flatbuffers.field_vector(self._buf, int(self._pos), 14) + i * 4
        return Date(self._buf, start)

    fn has_important_dates(self) -> Bool:
        return flatbuffers.has_field(self._buf, int(self._pos), 14)

    fn important_dates_length(self) -> Int:
        return flatbuffers.field_vector_len(self._buf, int(self._pos), 14)

    fn important_months(self, i: Int) -> Month:
        return flatbuffers.read[DType.uint8](self._buf, flatbuffers.field_vector(self._buf, int(self._pos), 16) + i * 1)

    fn has_important_months(self) -> Bool:
        return flatbuffers.has_field(self._buf, int(self._pos), 16)

    fn important_months_length(self) -> Int:
        return flatbuffers.field_vector_len(self._buf, int(self._pos), 16)

    fn lucky_numbers(self, i: Int) -> Int32:
        return flatbuffers.read[DType.int32](self._buf, flatbuffers.field_vector(self._buf, int(self._pos), 18) + i * 4)

    fn has_lucky_numbers(self) -> Bool:
        return flatbuffers.has_field(self._buf, int(self._pos), 18)

    fn lucky_numbers_length(self) -> Int:
        return flatbuffers.field_vector_len(self._buf, int(self._pos), 18)

    fn friends(self, i: Int) -> Person:
        var start = flatbuffers.field_vector(self._buf, int(self._pos), 20) + i * 4
        start += flatbuffers.read_offset_as_int(self._buf, start)
        return Person(self._buf, start)

    fn has_friends(self) -> Bool:
        return flatbuffers.has_field(self._buf, int(self._pos), 20)

    fn friends_length(self) -> Int:
        return flatbuffers.field_vector_len(self._buf, int(self._pos), 20)

    fn primary_address_type(self) -> Address:
        return flatbuffers.field[DType.uint8](self._buf, int(self._pos), 22, 0)

    fn primary_address_as_Postal(self) -> PostalAddress:
        return PostalAddress(self._buf, flatbuffers.field_table(self._buf, int(self._pos), 24).or_else(0))

    fn primary_address_as_Email(self) -> EmailAddress:
        return EmailAddress(self._buf, flatbuffers.field_table(self._buf, int(self._pos), 24).or_else(0))

    fn other_adresses_type(self, i: Int) -> Address:
        return flatbuffers.read[DType.uint8](self._buf, flatbuffers.field_vector(self._buf, int(self._pos), 26) + i * 1)

    fn has_other_adresses_type(self) -> Bool:
        return flatbuffers.has_field(self._buf, int(self._pos), 26)

    fn other_adresses_type_length(self) -> Int:
        return flatbuffers.field_vector_len(self._buf, int(self._pos), 26)

    fn other_adresses_as_Postal(self, i: Int) -> PostalAddress:
        var start = flatbuffers.field_vector(self._buf, int(self._pos), 28) + i * 4
        start += flatbuffers.read_offset_as_int(self._buf, start)
        return PostalAddress(self._buf, start)

    fn other_adresses_as_Email(self, i: Int) -> EmailAddress:
        var start = flatbuffers.field_vector(self._buf, int(self._pos), 28) + i * 4
        start += flatbuffers.read_offset_as_int(self._buf, start)
        return EmailAddress(self._buf, start)

    fn has_other_adresses(self) -> Bool:
        return flatbuffers.has_field(self._buf, int(self._pos), 28)

    fn other_adresses_length(self) -> Int:
        return flatbuffers.field_vector_len(self._buf, int(self._pos), 28)

    @staticmethod
    fn as_root(buf: UnsafePointer[UInt8]) -> Person:
        return Person(buf, flatbuffers.read_offset_as_int(buf, 0))

    @staticmethod
    fn build(
        mut builder: flatbuffers.Builder,
        *,
        name: Optional[StringRef] = None,
        birthday: Optional[DateVO] = None,
        nicknames: List[flatbuffers.Offset] = List[flatbuffers.Offset](),
        important_dates: List[DateVO] = List[DateVO](),
        important_months: List[Month] = List[Month](),
        lucky_numbers: List[Int32] = List[Int32](),
        friends: List[flatbuffers.Offset] = List[flatbuffers.Offset](),
        primary_address_type: Address = Address(0),
        primary_address: Optional[flatbuffers.Offset] = None,
        other_adresses_type: List[Address] = List[Address](),
        other_adresses: List[flatbuffers.Offset] = List[flatbuffers.Offset](),
    ) -> flatbuffers.Offset:
        var _name: Optional[flatbuffers.Offset] = None
        if name is not None:
            _name = builder.prepend(name.value())
        var _nicknames: Optional[flatbuffers.Offset] = None
        if len(nicknames) > 0:
            builder.start_vector(4, len(nicknames), 4)
            for o in nicknames.__reversed__():
                builder.prepend(o[])
            _nicknames = builder.end_vector(len(nicknames))

        var _important_dates: Optional[flatbuffers.Offset] = None
        if len(important_dates) > 0:
            builder.start_vector(4, len(important_dates), 2)
            for o in important_dates.__reversed__():
                Date.build(
                    builder,
                    day=o[].day,
                    month=o[].month,
                    year=o[].year,
                )
            _important_dates = builder.end_vector(len(important_dates))

        var _important_months: Optional[flatbuffers.Offset] = None
        if len(important_months) > 0:
            builder.start_vector(1, len(important_months), 1)
            for o in important_months.__reversed__():
                builder.prepend(o[].value)
            _important_months = builder.end_vector(len(important_months))

        var _lucky_numbers: Optional[flatbuffers.Offset] = None
        if len(lucky_numbers) > 0:
            builder.start_vector(4, len(lucky_numbers), 4)
            for o in lucky_numbers.__reversed__():
                builder.prepend(o[])
            _lucky_numbers = builder.end_vector(len(lucky_numbers))

        var _friends: Optional[flatbuffers.Offset] = None
        if len(friends) > 0:
            builder.start_vector(4, len(friends), 4)
            for o in friends.__reversed__():
                builder.prepend(o[])
            _friends = builder.end_vector(len(friends))

        var _other_adresses_type: Optional[flatbuffers.Offset] = None
        if len(other_adresses_type) > 0:
            builder.start_vector(1, len(other_adresses_type), 1)
            for o in other_adresses_type.__reversed__():
                builder.prepend(o[].value)
            _other_adresses_type = builder.end_vector(len(other_adresses_type))

        var _other_adresses: Optional[flatbuffers.Offset] = None
        if len(other_adresses) > 0:
            builder.start_vector(4, len(other_adresses), 4)
            for o in other_adresses.__reversed__():
                builder.prepend(o[])
            _other_adresses = builder.end_vector(len(other_adresses))

        builder.start_object(13)
        if _name is not None:
            builder.prepend(_name.value())
            builder.slot(0)
        if birthday is not None:
            Date.build(
                builder,
                day=birthday.value().day,
                month=birthday.value().month,
                year=birthday.value().year,
            )
            builder.slot(2)
        if _nicknames is not None:
            builder.prepend(_nicknames.value())
            builder.slot(4)
        if _important_dates is not None:
            builder.prepend(_important_dates.value())
            builder.slot(5)
        if _important_months is not None:
            builder.prepend(_important_months.value())
            builder.slot(6)
        if _lucky_numbers is not None:
            builder.prepend(_lucky_numbers.value())
            builder.slot(7)
        if _friends is not None:
            builder.prepend(_friends.value())
            builder.slot(8)
        if primary_address_type != Address(0):
            builder.prepend(primary_address_type.value)
            builder.slot(9)
        if primary_address is not None:
            builder.prepend(primary_address.value())
            builder.slot(10)
        if _other_adresses_type is not None:
            builder.prepend(_other_adresses_type.value())
            builder.slot(11)
        if _other_adresses is not None:
            builder.prepend(_other_adresses.value())
            builder.slot(12)
        return builder.end_object()

