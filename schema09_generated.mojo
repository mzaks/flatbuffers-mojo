# automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

@value
struct T2:
    var _buf: UnsafePointer[UInt8]
    var _pos: Int

    fn value(self) -> Int64:
        return flatbuffers.field[DType.int64](self._buf, int(self._pos), 4, 0)

    fn flags(self, i: Int) -> Scalar[DType.bool]:
        return flatbuffers.read[DType.bool](self._buf, flatbuffers.field_vector(self._buf, int(self._pos), 6) + i * 1)

    fn has_flags(self) -> Bool:
        return flatbuffers.has_field(self._buf, int(self._pos), 6)

    fn flags_length(self) -> Int:
        return flatbuffers.field_vector_len(self._buf, int(self._pos), 6)

    @staticmethod
    fn as_root(buf: UnsafePointer[UInt8]) -> T2:
        return T2(buf, flatbuffers.read_offset_as_int(buf, 0))

    @staticmethod
    fn build(
        inout builder: flatbuffers.Builder,
        *,
        value: Int64 = 0,
        flags: List[Scalar[DType.bool]] = List[Scalar[DType.bool]](),
    ) -> flatbuffers.Offset:
        var _flags: Optional[flatbuffers.Offset] = None
        if len(flags) > 0:
            builder.start_vector(1, len(flags), 1)
            for o in flags.__reversed__():
                builder.prepend(o[])
            _flags = builder.end_vector(len(flags))

        builder.start_object(2)
        if value != 0:
            builder.prepend(value)
            builder.slot(0)
        if _flags is not None:
            builder.prepend(_flags.value())
            builder.slot(1)
        return builder.end_object()

@value
struct T1:
    var _buf: UnsafePointer[UInt8]
    var _pos: Int

    fn name(self) -> StringRef:
        return flatbuffers.field_string(self._buf, int(self._pos), 4)

    fn sibling(self) -> T2:
        var o = flatbuffers.field_table(self._buf, int(self._pos), 6)
        return T2(self._buf, o.take())

    fn nickname(self) -> StringRef:
        return flatbuffers.field_string(self._buf, int(self._pos), 8)

    fn has_nickname(self) -> Bool:
        return flatbuffers.has_field(self._buf, int(self._pos), 8)

    fn optinal_sibling(self) -> Optional[T2]:
        var o = flatbuffers.field_table(self._buf, int(self._pos), 10)
        if o:
            return T2(self._buf, o.take())
        return None

    @staticmethod
    fn as_root(buf: UnsafePointer[UInt8]) -> T1:
        return T1(buf, flatbuffers.read_offset_as_int(buf, 0))

    @staticmethod
    fn build(
        inout builder: flatbuffers.Builder,
        *,
        name: StringRef,
        sibling: flatbuffers.Offset,
        nickname: Optional[StringRef] = None,
        optinal_sibling: Optional[flatbuffers.Offset] = None,
    ) -> flatbuffers.Offset:
        var _name = builder.prepend(name)
        var _nickname: Optional[flatbuffers.Offset] = None
        if nickname is not None:
            _nickname = builder.prepend(nickname.value())
        builder.start_object(4)
        builder.prepend(_name)
        builder.slot(0)
        builder.prepend(sibling)
        builder.slot(1)
        if _nickname is not None:
            builder.prepend(_nickname.value())
            builder.slot(2)
        if optinal_sibling is not None:
            builder.prepend(optinal_sibling.value())
            builder.slot(3)
        return builder.end_object()

